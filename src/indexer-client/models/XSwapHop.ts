/* tslint:disable */
/* eslint-disable */
/**
 * Indexer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TokenState } from './TokenState';
import {
    TokenStateFromJSON,
    TokenStateFromJSONTyped,
    TokenStateToJSON,
} from './TokenState';

/**
 * 
 * @export
 * @interface XSwapHop
 */
export interface XSwapHop {
    /**
     * 
     * @type {string}
     * @memberof XSwapHop
     */
    type: XSwapHopTypeEnum;
    /**
     * 
     * @type {TokenState}
     * @memberof XSwapHop
     */
    tokenIn: TokenState;
    /**
     * 
     * @type {TokenState}
     * @memberof XSwapHop
     */
    tokenOut: TokenState;
    /**
     * when type=swap, this exists
     * @type {string}
     * @memberof XSwapHop
     */
    dex?: XSwapHopDexEnum;
    /**
     * when type=swap, this exists, liquidity pool address on the selected dex
     * @type {string}
     * @memberof XSwapHop
     */
    pool?: string;
    /**
     * when type=bridge, this exists
     * @type {string}
     * @memberof XSwapHop
     */
    bridge?: XSwapHopBridgeEnum;
    /**
     * dex provider fee
     * @type {string}
     * @memberof XSwapHop
     */
    providerFee: string;
}


/**
 * @export
 */
export const XSwapHopTypeEnum = {
    Swap: 'swap',
    Bridge: 'bridge'
} as const;
export type XSwapHopTypeEnum = typeof XSwapHopTypeEnum[keyof typeof XSwapHopTypeEnum];

/**
 * @export
 */
export const XSwapHopDexEnum = {
    UniswapV2: 'uniswap_v2',
    Quickswap: 'quickswap'
} as const;
export type XSwapHopDexEnum = typeof XSwapHopDexEnum[keyof typeof XSwapHopDexEnum];

/**
 * @export
 */
export const XSwapHopBridgeEnum = {
    Wormhole: 'wormhole',
    Tbtc: 'tbtc',
    Cctp: 'cctp'
} as const;
export type XSwapHopBridgeEnum = typeof XSwapHopBridgeEnum[keyof typeof XSwapHopBridgeEnum];


/**
 * Check if a given object implements the XSwapHop interface.
 */
export function instanceOfXSwapHop(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "tokenIn" in value;
    isInstance = isInstance && "tokenOut" in value;
    isInstance = isInstance && "providerFee" in value;

    return isInstance;
}

export function XSwapHopFromJSON(json: any): XSwapHop {
    return XSwapHopFromJSONTyped(json, false);
}

export function XSwapHopFromJSONTyped(json: any, ignoreDiscriminator: boolean): XSwapHop {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'tokenIn': TokenStateFromJSON(json['tokenIn']),
        'tokenOut': TokenStateFromJSON(json['tokenOut']),
        'dex': !exists(json, 'dex') ? undefined : json['dex'],
        'pool': !exists(json, 'pool') ? undefined : json['pool'],
        'bridge': !exists(json, 'bridge') ? undefined : json['bridge'],
        'providerFee': json['providerFee'],
    };
}

export function XSwapHopToJSON(value?: XSwapHop | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'tokenIn': TokenStateToJSON(value.tokenIn),
        'tokenOut': TokenStateToJSON(value.tokenOut),
        'dex': value.dex,
        'pool': value.pool,
        'bridge': value.bridge,
        'providerFee': value.providerFee,
    };
}

